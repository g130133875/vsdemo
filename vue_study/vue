vue基本指令:
  v-for
  v-once: 只显示一次
  v-html: 解析html
  v-text
  v-pre: 不解析{{}}
  v-cloak 

v-bind:
  动态绑定属性
    eg: <img （v-bind）:src=" ">

var let const的区别:
  var: 作用域为函数
  let: 作用域为块
  const: 修饰后不可修改且必须赋值(对象内部的属性可修改)


vue常用指令
  v-on的参数问题:
  事件调用的方法没有参数可省略小括号
  如果有参数没有写则函数的形参为undefined
  在调用方法，手动获取到浏览器参数的event对象: $event

  v-on修饰符:
    .stop 停止冒泡
    .prevent 阻止默认行为 
    .{keyCode | keyAlias} 只当事件是从特定建触发时才触发回调
    .native 监听组件根元素的原生事件
    .once 只触发一次回调

  v-if、v-else-if、v-else
    v-if后面的条件为false时，对应的元素以及子元素不会渲染
  v-show:
    v-if: 条件为false时，包含v-if指令的元素，DOM中不会存在对应的元素
    v-show: display:none，适用于切换频率高的情况


  组件的key属性:
    使用v-for时给对应组件添加:key属性
    作用：高效的更新虚拟DOM


  可以做到响应式的数组方法:
    push()
    pop()
    shift(): 删除第一个元素
    unshift(): 在前面添加元素
    splice(位置，删除元素个数，插入的元素): 删除/插入/替换元素
    sort()
    reverse(): 反转

高阶函数filter/map/reduce
  filter:
    回调函数有一个要求:返回一个boolean的值
    true: 函数内部将回调的n加入新数组
    false: 函数内部过滤掉n
  map:
    eg:
      let newNums = nums.map(function (n){
        return n*2;
      }) 
  reduce: 对数组中所有的内容进行汇总
    eg:
      let total = nums.reduce(function (preValue, n) {
        return preValue+n;
      },0)

v-model
  实现双向绑定
  修饰符: lazy, number, trim
    lazy: 失去焦点或者回车后更新
    number: 输入的内容自动转换成数字类型
    trim: 可以过滤左右两边空格

组件化开发
  组件中的data必须是个函数，且返回实例
  父子组件的访问方式: $children
    父组件访问子组件：使用$children或$refs
    子组件访问父组件: 使用$parent
  slot: 让组件更具有拓展性
    对象： 有许多区别同时有许多共性的组件
    方法： 抽取共性，保留不同
  具名插槽: 给slot命名方便修改属性

模块化开发
  模块化核心：导入和导出
    CommonJS的导出：
      module.exports = {
        flag: true,
        test(a, b) {
          return a+b
        }
      }
    CommonJS的导入:
      let {flag, test} = require('moduleA');

Webpack
  JavaScript应用的静态模板打包工具:前端模块化打包工具
  全局安装:
    npm install webpack@3.6.0 -g
  局部安装:
    npm install webpack@3.6.0 --save-dev